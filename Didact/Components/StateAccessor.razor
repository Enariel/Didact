@using System.Xml.Serialization
@using Blazored.LocalStorage

@code {

	[Inject] private ILocalStorageService _localStorageService { get; set; }
	protected bool _isModifyingData = false;

	protected virtual async Task SaveAsync<TData>(string key, TData data, CancellationToken token = default)
	{
		_isModifyingData = true;
		string dataString = await SerializeToXmlAsync(data, token);
		await _localStorageService.SetItemAsStringAsync(key, dataString, token);
		_isModifyingData = false;
	}

	protected virtual async Task<TData> GetDataAsync<TData>(string key, CancellationToken token = default)
	{
		_isModifyingData = true;
		string dataString = await _localStorageService.GetItemAsStringAsync(key, token);
		TData data = default;
		if (!string.IsNullOrEmpty(dataString))
			data = await DeserializeFromXmlAsync<TData>(dataString, token);
		_isModifyingData = false;
		return data;
	}

	protected virtual async Task ClearAllDataAsync(CancellationToken token = default)
	{
		_isModifyingData = true;
		await _localStorageService.ClearAsync(token);
		_isModifyingData = false;
	}

	protected virtual async Task ClearDataAsync(string key, CancellationToken token = default)
	{
		_isModifyingData = true;
		await _localStorageService.RemoveItemAsync(key, token);
		_isModifyingData = false;
	}

	protected virtual async Task ClearDataAsync(string[] keys, CancellationToken token = default)
	{
		_isModifyingData = true;
		await _localStorageService.RemoveItemsAsync(keys, token);
		_isModifyingData = false;
	}

	// Serialize value as XML

	protected Task<string> SerializeToXmlAsync<TData>(TData data, CancellationToken token = default)
	{
		if (!token.IsCancellationRequested)
		{
			_isModifyingData = true;
			XmlSerializer serializer = new XmlSerializer(typeof(TData));
			using (StringWriter sw = new StringWriter())
			{
				serializer.Serialize(sw, data);
				string xml = sw.ToString();
				_isModifyingData = false;
				return Task.FromResult(xml);
			}
		}

		_isModifyingData = false;
		return Task.FromResult("");
	}

	protected Task<TData> DeserializeFromXmlAsync<TData>(string xmlString, CancellationToken token = default)
	{
		if (!token.IsCancellationRequested && !string.IsNullOrEmpty(xmlString))
		{
			_isModifyingData = true;
			XmlSerializer serializer = new XmlSerializer(typeof(TData));
			using (StringReader reader = new StringReader(xmlString))
			{
				TData obj = (TData)serializer.Deserialize(reader);
				_isModifyingData = false;
				return Task.FromResult(obj);
			}
		}

		_isModifyingData = false;
		return null;
	}

}