@using System.Linq.Expressions
@using Didact.Flatify.Forms
@using Didact.Flatify.Components.Paper
@inherits Didact.Components.Data.DataManager

<FlatifyPaper Class="container-xl width-100p height-100p" StyleType="StyleType.Light">

	<EditForm Model="@_model" OnValidSubmit="@(async (e) => await OnValidSubmitAsync(e))">
		<DataAnnotationsValidator/>
		<ValidationSummary/>
		<div class="flex-column-center-x">
			@* <label class="form-label">GUID: @_model.AuthorId</label> *@
			<div class="input-wrapper floating-label width-100p">
				<InputText @bind-Value="@_model.PenName" id="@(nameof(_model.PenName))" type="text"
				           placeholder="Pen Name" required="true"/>
				<label for="@(nameof(_model.PenName))" name="@(nameof(_model.PenName))" class="form-label">
					Pen Name:
				</label>
			</div>
			<p class="text-sm width-100p">This is effectively your author or pen name for this world. Dont worry, it can be changed
				at any time!</p>
			<div class="flex-center-x width-100p">
				<div class="input-wrapper floating-label width-100p">
					<InputText @bind-Value="@_model.FirstName" id="@(nameof(_model.FirstName))"
					           type="text"
					           placeholder="First Name"/>
					<label for="@(nameof(_model.FirstName))" name="@(nameof(_model.FirstName))" class="form-label">
						First Name:
					</label>
				</div>

				<div class="input-wrapper floating-label width-100p">
					<InputText @bind-Value="@_model.LastName" id="@(nameof(_model.LastName))"
					           type="text"
					           placeholder="Last Name"/>
					<label for="@(nameof(_model.LastName))" name="@(nameof(_model.LastName))" class="form-label">
						Last Name:
					</label>
				</div>
			</div>
		</div>

		<div class="button-group">
			<button disabled="@IsModifyingData" type="submit" class="button style-accent width-100p">
				<i class="fa-solid fa-floppy-disk"></i>
				Save
			</button>
			<button disabled="@IsModifyingData" class="button style-light width-100p" type="button"
			        @onclick="@(() => _model = new Author(){ AuthorId = Guid.NewGuid() })">
				<i class="fa-solid fa-stop"></i>
				Clear
			</button>
		</div>

	</EditForm>
</FlatifyPaper>

@code {

	private DidactData _dataModel;

	private Author _model = new Author()
	{
		AuthorId = Guid.NewGuid()
	};

	private string _messages;
	private bool _isValid;
	[CascadingParameter(Name = "Didact")] public DidactData Didact { get; set; }
	[Inject] private NavigationManager Nav { get; set; }

	private async Task OnValidSubmitAsync(EditContext arg)
	{
		_isValid = arg.Validate();
		if (_isValid)
		{
			try
			{
				_model.AuthorId = Guid.NewGuid();
				_model.CreatedOn = DateTime.UtcNow;
				Didact = new DidactData(_model);
				await base.SaveAsync(Utils.Keys.GameFile, Didact);
				StateHasChanged();
				Nav.Refresh(true);
			}
			catch (Exception ex)
			{
				_messages = ex.Message;
				_messages += $"\n\tSource: {ex.Source}";
				_messages += $"\n\tStack Trace: {ex.StackTrace}";
			}
		}
	}

}