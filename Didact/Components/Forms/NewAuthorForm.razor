@using System.Linq.Expressions
@using Didact.Flatify.Forms
@using Didact.Flatify.Components.Paper
@inherits Didact.Components.Data.DataManager

<FlatifyPaper Width="auto" Height="100%">

	<EditForm Model="@_model" OnValidSubmit="@(async (e) => await OnValidSubmitAsync(e))" class="container-fluid">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

		<div class="input-wrapper floating-label">
			<label class="form-label">GUID: </label>
		</div>

		<div class="input-wrapper floating-label">
			<InputText @bind-Value="@_model.PenName" id="@(nameof(_model.PenName))"
			           type="@InputType.Text.ToString().ToLower()" placeholder="Pen Name"/>
			<label for="@(nameof(_model.PenName))" name="@(nameof(_model.PenName))" class="form-label">
				Enter your Pen Name:
			</label>
		</div>

		<div class="input-wrapper floating-label">
			<InputText @bind-Value="@_model.FirstName" id="@(nameof(_model.FirstName))"
			           type="@InputType.Text.ToString().ToLower()"
			           placeholder="First Name"/>
			<label for="@(nameof(_model.FirstName))" name="@(nameof(_model.FirstName))" class="form-label">
				First Name:
			</label>
		</div>

		<div class="input-wrapper floating-label">
			<InputText @bind-Value="@_model.LastName" id="@(nameof(_model.LastName))"
			           type="@InputType.Text.ToString().ToLower()"
			           placeholder="Last Name"/>
			<label for="@(nameof(_model.LastName))" name="@(nameof(_model.LastName))" class="form-label">
				Last Name:
			</label>
		</div>

		<div class="button-group">
			<button disabled="@IsModifyingData" type="submit" class="button style-accent size-2x">
				Save
			</button>

			<button disabled="@IsModifyingData" class="button style-accent outline" type="button"
			        @onclick="@(() => _model = new Author())">
				Clear
			</button>
		</div>

	</EditForm>
</FlatifyPaper>

@code {

	private DidactData _dataModel;

	private Author _model = new Author()
	{
		AuthorId = Guid.NewGuid()
	};

	private string _messages;
	private bool _isValid;
	[CascadingParameter(Name = "Didact")] public DidactData Didact { get; set; }
	[Inject] private NavigationManager Nav { get; set; }

	private async Task OnValidSubmitAsync(EditContext arg)
	{
		_isValid = arg.Validate();
		if (_isValid)
		{
			try
			{
				_model.AuthorId = Guid.NewGuid();
				_model.CreatedOn = DateTime.UtcNow;
				Didact = new DidactData(_model);
				await base.SaveAsync(Utils.Keys.GameFile, Didact);
				StateHasChanged();
				Nav.Refresh(true);
			}
			catch (Exception ex)
			{
				_messages = ex.Message;
				_messages += $"\n\tSource: {ex.Source}";
				_messages += $"\n\tStack Trace: {ex.StackTrace}";
			}
		}
	}

}